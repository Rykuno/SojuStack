/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ApiUsersRouteImport } from './routes/api/users'
import { Route as ApiUsersIdRouteImport } from './routes/api/users.$id'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiUsersRoute = ApiUsersRouteImport.update({
  id: '/api/users',
  path: '/api/users',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiUsersIdRoute = ApiUsersIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => ApiUsersRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/api/users': typeof ApiUsersRouteWithChildren
  '/api/users/$id': typeof ApiUsersIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/api/users': typeof ApiUsersRouteWithChildren
  '/api/users/$id': typeof ApiUsersIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/api/users': typeof ApiUsersRouteWithChildren
  '/api/users/$id': typeof ApiUsersIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/api/users' | '/api/users/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/api/users' | '/api/users/$id'
  id: '__root__' | '/' | '/login' | '/api/users' | '/api/users/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  ApiUsersRoute: typeof ApiUsersRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/users': {
      id: '/api/users'
      path: '/api/users'
      fullPath: '/api/users'
      preLoaderRoute: typeof ApiUsersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/users/$id': {
      id: '/api/users/$id'
      path: '/$id'
      fullPath: '/api/users/$id'
      preLoaderRoute: typeof ApiUsersIdRouteImport
      parentRoute: typeof ApiUsersRoute
    }
  }
}

interface ApiUsersRouteChildren {
  ApiUsersIdRoute: typeof ApiUsersIdRoute
}

const ApiUsersRouteChildren: ApiUsersRouteChildren = {
  ApiUsersIdRoute: ApiUsersIdRoute,
}

const ApiUsersRouteWithChildren = ApiUsersRoute._addFileChildren(
  ApiUsersRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  ApiUsersRoute: ApiUsersRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
